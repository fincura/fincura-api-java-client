/*
 * Fincura Integration API
 * This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****
 *
 * The version of the OpenAPI document: 1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fincura.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.UUID;
import org.fincura.client.model.EmbeddedWorkflowUiControls;
import org.threeten.bp.OffsetDateTime;

/**
 * EmbeddedWorkflow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-11-16T22:01:35.618Z[GMT]")
public class EmbeddedWorkflow {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_DOCUMENT_FILE_UUID = "document_file_uuid";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_FILE_UUID)
  private UUID documentFileUuid;

  /**
   * Gets or Sets embedType
   */
  @JsonAdapter(EmbedTypeEnum.Adapter.class)
  public enum EmbedTypeEnum {
    IFRAME("IFRAME"),
    
    NONE("NONE");

    private String value;

    EmbedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmbedTypeEnum fromValue(String value) {
      for (EmbedTypeEnum b : EmbedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmbedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmbedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmbedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmbedTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMBED_TYPE = "embed_type";
  @SerializedName(SERIALIZED_NAME_EMBED_TYPE)
  private EmbedTypeEnum embedType;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  /**
   * Gets or Sets exitStep
   */
  @JsonAdapter(ExitStepEnum.Adapter.class)
  public enum ExitStepEnum {
    TABLE_ID("TABLE_ID"),
    
    COLUMN_ID("COLUMN_ID"),
    
    REVIEW("REVIEW"),
    
    SPREAD("SPREAD");

    private String value;

    ExitStepEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExitStepEnum fromValue(String value) {
      for (ExitStepEnum b : ExitStepEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExitStepEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExitStepEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExitStepEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExitStepEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXIT_STEP = "exit_step";
  @SerializedName(SERIALIZED_NAME_EXIT_STEP)
  private ExitStepEnum exitStep;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private URI redirectUrl;

  public static final String SERIALIZED_NAME_UI_CONTROLS = "ui_controls";
  @SerializedName(SERIALIZED_NAME_UI_CONTROLS)
  private EmbeddedWorkflowUiControls uiControls;

  public static final String SERIALIZED_NAME_LOADED = "loaded";
  @SerializedName(SERIALIZED_NAME_LOADED)
  private Boolean loaded;

  public static final String SERIALIZED_NAME_LOAD_WORKFLOW_URL = "load_workflow_url";
  @SerializedName(SERIALIZED_NAME_LOAD_WORKFLOW_URL)
  private URI loadWorkflowUrl;


   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUuid() {
    return uuid;
  }




  public EmbeddedWorkflow documentFileUuid(UUID documentFileUuid) {
    
    this.documentFileUuid = documentFileUuid;
    return this;
  }

   /**
   * UUID of the DocumentFile for this workflow
   * @return documentFileUuid
  **/
  @ApiModelProperty(required = true, value = "UUID of the DocumentFile for this workflow")

  public UUID getDocumentFileUuid() {
    return documentFileUuid;
  }


  public void setDocumentFileUuid(UUID documentFileUuid) {
    this.documentFileUuid = documentFileUuid;
  }


  public EmbeddedWorkflow embedType(EmbedTypeEnum embedType) {
    
    this.embedType = embedType;
    return this;
  }

   /**
   * Get embedType
   * @return embedType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmbedTypeEnum getEmbedType() {
    return embedType;
  }


  public void setEmbedType(EmbedTypeEnum embedType) {
    this.embedType = embedType;
  }


   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }




  public EmbeddedWorkflow exitStep(ExitStepEnum exitStep) {
    
    this.exitStep = exitStep;
    return this;
  }

   /**
   * Get exitStep
   * @return exitStep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExitStepEnum getExitStep() {
    return exitStep;
  }


  public void setExitStep(ExitStepEnum exitStep) {
    this.exitStep = exitStep;
  }


  public EmbeddedWorkflow redirectUrl(URI redirectUrl) {
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * Get redirectUrl
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(URI redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public EmbeddedWorkflow uiControls(EmbeddedWorkflowUiControls uiControls) {
    
    this.uiControls = uiControls;
    return this;
  }

   /**
   * Get uiControls
   * @return uiControls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmbeddedWorkflowUiControls getUiControls() {
    return uiControls;
  }


  public void setUiControls(EmbeddedWorkflowUiControls uiControls) {
    this.uiControls = uiControls;
  }


   /**
   * Get loaded
   * @return loaded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLoaded() {
    return loaded;
  }




   /**
   * Get loadWorkflowUrl
   * @return loadWorkflowUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getLoadWorkflowUrl() {
    return loadWorkflowUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddedWorkflow embeddedWorkflow = (EmbeddedWorkflow) o;
    return Objects.equals(this.uuid, embeddedWorkflow.uuid) &&
        Objects.equals(this.documentFileUuid, embeddedWorkflow.documentFileUuid) &&
        Objects.equals(this.embedType, embeddedWorkflow.embedType) &&
        Objects.equals(this.createdDate, embeddedWorkflow.createdDate) &&
        Objects.equals(this.exitStep, embeddedWorkflow.exitStep) &&
        Objects.equals(this.redirectUrl, embeddedWorkflow.redirectUrl) &&
        Objects.equals(this.uiControls, embeddedWorkflow.uiControls) &&
        Objects.equals(this.loaded, embeddedWorkflow.loaded) &&
        Objects.equals(this.loadWorkflowUrl, embeddedWorkflow.loadWorkflowUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, documentFileUuid, embedType, createdDate, exitStep, redirectUrl, uiControls, loaded, loadWorkflowUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddedWorkflow {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    documentFileUuid: ").append(toIndentedString(documentFileUuid)).append("\n");
    sb.append("    embedType: ").append(toIndentedString(embedType)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    exitStep: ").append(toIndentedString(exitStep)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    uiControls: ").append(toIndentedString(uiControls)).append("\n");
    sb.append("    loaded: ").append(toIndentedString(loaded)).append("\n");
    sb.append("    loadWorkflowUrl: ").append(toIndentedString(loadWorkflowUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

