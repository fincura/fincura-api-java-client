/*
 * Fincura Integration API
 * This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****
 *
 * The version of the OpenAPI document: 1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fincura.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.fincura.client.model.DataViewColumns;
import org.fincura.client.model.DataViewRows;

/**
 * DataView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-11-17T21:24:18.400Z[GMT]")
public class DataView {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_BORROWER_UUID = "borrower_uuid";
  @SerializedName(SERIALIZED_NAME_BORROWER_UUID)
  private UUID borrowerUuid;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<DataViewColumns> columns = new ArrayList<DataViewColumns>();

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<DataViewRows> rows = new ArrayList<DataViewRows>();


  public DataView title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public DataView borrowerUuid(UUID borrowerUuid) {
    
    this.borrowerUuid = borrowerUuid;
    return this;
  }

   /**
   * UUID of the borrower for this DataView. (see [Borrowers](#tag/Borrowers))
   * @return borrowerUuid
  **/
  @ApiModelProperty(required = true, value = "UUID of the borrower for this DataView. (see [Borrowers](#tag/Borrowers))")

  public UUID getBorrowerUuid() {
    return borrowerUuid;
  }


  public void setBorrowerUuid(UUID borrowerUuid) {
    this.borrowerUuid = borrowerUuid;
  }


  public DataView columns(List<DataViewColumns> columns) {
    
    this.columns = columns;
    return this;
  }

  public DataView addColumnsItem(DataViewColumns columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @ApiModelProperty(required = true, value = "")

  public List<DataViewColumns> getColumns() {
    return columns;
  }


  public void setColumns(List<DataViewColumns> columns) {
    this.columns = columns;
  }


  public DataView rows(List<DataViewRows> rows) {
    
    this.rows = rows;
    return this;
  }

  public DataView addRowsItem(DataViewRows rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Get rows
   * @return rows
  **/
  @ApiModelProperty(required = true, value = "")

  public List<DataViewRows> getRows() {
    return rows;
  }


  public void setRows(List<DataViewRows> rows) {
    this.rows = rows;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataView dataView = (DataView) o;
    return Objects.equals(this.title, dataView.title) &&
        Objects.equals(this.borrowerUuid, dataView.borrowerUuid) &&
        Objects.equals(this.columns, dataView.columns) &&
        Objects.equals(this.rows, dataView.rows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, borrowerUuid, columns, rows);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataView {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    borrowerUuid: ").append(toIndentedString(borrowerUuid)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

