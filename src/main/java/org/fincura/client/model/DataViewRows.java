/*
 * Fincura API
 * This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | Excel File | .xlsm | `application/vnd.ms-excel.sheet.macroEnabled.12`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****
 *
 * The version of the OpenAPI document: 1.2.6
 * Contact: support@fincura.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fincura.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.fincura.client.model.DataViewCalculatedValueLineItem;
import org.fincura.client.model.DataViewCellFormat;
import org.fincura.client.model.DataViewRowFormat;

/**
 * DataViewRows
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-15T17:13:42.707Z[GMT]")
public class DataViewRows {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LINE_ITEM = "line_item";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM)
  private DataViewCalculatedValueLineItem lineItem;

  public static final String SERIALIZED_NAME_INDENTATION = "indentation";
  @SerializedName(SERIALIZED_NAME_INDENTATION)
  private Integer indentation;

  public static final String SERIALIZED_NAME_ROW_FORMAT = "row_format";
  @SerializedName(SERIALIZED_NAME_ROW_FORMAT)
  private DataViewRowFormat rowFormat;

  public static final String SERIALIZED_NAME_CELL_FORMAT = "cell_format";
  @SerializedName(SERIALIZED_NAME_CELL_FORMAT)
  private DataViewCellFormat cellFormat;


  public DataViewRows label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @ApiModelProperty(required = true, value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public DataViewRows lineItem(DataViewCalculatedValueLineItem lineItem) {
    
    this.lineItem = lineItem;
    return this;
  }

   /**
   * Get lineItem
   * @return lineItem
  **/
  @ApiModelProperty(required = true, value = "")

  public DataViewCalculatedValueLineItem getLineItem() {
    return lineItem;
  }


  public void setLineItem(DataViewCalculatedValueLineItem lineItem) {
    this.lineItem = lineItem;
  }


  public DataViewRows indentation(Integer indentation) {
    
    this.indentation = indentation;
    return this;
  }

   /**
   * Get indentation
   * @return indentation
  **/
  @ApiModelProperty(required = true, value = "")

  public Integer getIndentation() {
    return indentation;
  }


  public void setIndentation(Integer indentation) {
    this.indentation = indentation;
  }


  public DataViewRows rowFormat(DataViewRowFormat rowFormat) {
    
    this.rowFormat = rowFormat;
    return this;
  }

   /**
   * Get rowFormat
   * @return rowFormat
  **/
  @ApiModelProperty(required = true, value = "")

  public DataViewRowFormat getRowFormat() {
    return rowFormat;
  }


  public void setRowFormat(DataViewRowFormat rowFormat) {
    this.rowFormat = rowFormat;
  }


  public DataViewRows cellFormat(DataViewCellFormat cellFormat) {
    
    this.cellFormat = cellFormat;
    return this;
  }

   /**
   * Get cellFormat
   * @return cellFormat
  **/
  @ApiModelProperty(required = true, value = "")

  public DataViewCellFormat getCellFormat() {
    return cellFormat;
  }


  public void setCellFormat(DataViewCellFormat cellFormat) {
    this.cellFormat = cellFormat;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataViewRows dataViewRows = (DataViewRows) o;
    return Objects.equals(this.label, dataViewRows.label) &&
        Objects.equals(this.lineItem, dataViewRows.lineItem) &&
        Objects.equals(this.indentation, dataViewRows.indentation) &&
        Objects.equals(this.rowFormat, dataViewRows.rowFormat) &&
        Objects.equals(this.cellFormat, dataViewRows.cellFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, lineItem, indentation, rowFormat, cellFormat);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataViewRows {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    lineItem: ").append(toIndentedString(lineItem)).append("\n");
    sb.append("    indentation: ").append(toIndentedString(indentation)).append("\n");
    sb.append("    rowFormat: ").append(toIndentedString(rowFormat)).append("\n");
    sb.append("    cellFormat: ").append(toIndentedString(cellFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

