/*
 * Fincura API
 * This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | Excel File | .xlsm | `application/vnd.ms-excel.sheet.macroEnabled.12`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@fincura.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fincura.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.UUID;
import org.threeten.bp.LocalDate;

/**
 * FinancialRequirementRules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-27T00:03:41.356Z[GMT]")
public class FinancialRequirementRules {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_THRESHOLD_VALUE = "threshold_value";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_VALUE)
  private BigDecimal thresholdValue;

  /**
   * Gets or Sets comparer
   */
  @JsonAdapter(ComparerEnum.Adapter.class)
  public enum ComparerEnum {
    _("=="),
    
    NOT_EQUAL("!="),
    
    GREATER_THAN(">"),
    
    LESS_THAN("<"),
    
    GREATER_THAN_OR_EQUAL_TO(">="),
    
    LESS_THAN_OR_EQUAL_TO("<=");

    private String value;

    ComparerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparerEnum fromValue(String value) {
      for (ComparerEnum b : ComparerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparerEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPARER = "comparer";
  @SerializedName(SERIALIZED_NAME_COMPARER)
  private ComparerEnum comparer;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;


   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUuid() {
    return uuid;
  }




  public FinancialRequirementRules thresholdValue(BigDecimal thresholdValue) {
    
    this.thresholdValue = thresholdValue;
    return this;
  }

   /**
   * Get thresholdValue
   * minimum: -1000000000000000000
   * maximum: 1000000000000000000
   * @return thresholdValue
  **/
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getThresholdValue() {
    return thresholdValue;
  }


  public void setThresholdValue(BigDecimal thresholdValue) {
    this.thresholdValue = thresholdValue;
  }


  public FinancialRequirementRules comparer(ComparerEnum comparer) {
    
    this.comparer = comparer;
    return this;
  }

   /**
   * Get comparer
   * @return comparer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ComparerEnum getComparer() {
    return comparer;
  }


  public void setComparer(ComparerEnum comparer) {
    this.comparer = comparer;
  }


  public FinancialRequirementRules startDate(LocalDate startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @ApiModelProperty(required = true, value = "")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public FinancialRequirementRules endDate(LocalDate endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialRequirementRules financialRequirementRules = (FinancialRequirementRules) o;
    return Objects.equals(this.uuid, financialRequirementRules.uuid) &&
        Objects.equals(this.thresholdValue, financialRequirementRules.thresholdValue) &&
        Objects.equals(this.comparer, financialRequirementRules.comparer) &&
        Objects.equals(this.startDate, financialRequirementRules.startDate) &&
        Objects.equals(this.endDate, financialRequirementRules.endDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, thresholdValue, comparer, startDate, endDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialRequirementRules {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    thresholdValue: ").append(toIndentedString(thresholdValue)).append("\n");
    sb.append("    comparer: ").append(toIndentedString(comparer)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

