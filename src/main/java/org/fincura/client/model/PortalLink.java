/*
 * Fincura API
 * This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | Excel File | .xlsm | `application/vnd.ms-excel.sheet.macroEnabled.12`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@fincura.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fincura.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.fincura.client.model.PortalLinkStatementTypes;
import org.threeten.bp.LocalDate;

/**
 * PortalLink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-27T00:03:41.356Z[GMT]")
public class PortalLink {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  /**
   * Gets or Sets reportingInterval
   */
  @JsonAdapter(ReportingIntervalEnum.Adapter.class)
  public enum ReportingIntervalEnum {
    MONTHLY("MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    SEMI_ANNUALLY("SEMI_ANNUALLY"),
    
    ANNUALLY("ANNUALLY"),
    
    FISCAL_YTD("FISCAL_YTD");

    private String value;

    ReportingIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportingIntervalEnum fromValue(String value) {
      for (ReportingIntervalEnum b : ReportingIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportingIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportingIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportingIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportingIntervalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPORTING_INTERVAL = "reporting_interval";
  @SerializedName(SERIALIZED_NAME_REPORTING_INTERVAL)
  private ReportingIntervalEnum reportingInterval = ReportingIntervalEnum.MONTHLY;

  public static final String SERIALIZED_NAME_FROM_DATE = "from_date";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private LocalDate fromDate;

  public static final String SERIALIZED_NAME_TO_DATE = "to_date";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private LocalDate toDate;

  public static final String SERIALIZED_NAME_STATEMENT_TYPES = "statement_types";
  @SerializedName(SERIALIZED_NAME_STATEMENT_TYPES)
  private List<PortalLinkStatementTypes> statementTypes = null;

  public static final String SERIALIZED_NAME_PORTAL_URL = "portal_url";
  @SerializedName(SERIALIZED_NAME_PORTAL_URL)
  private URI portalUrl;


   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUuid() {
    return uuid;
  }




  public PortalLink reportingInterval(ReportingIntervalEnum reportingInterval) {
    
    this.reportingInterval = reportingInterval;
    return this;
  }

   /**
   * Get reportingInterval
   * @return reportingInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportingIntervalEnum getReportingInterval() {
    return reportingInterval;
  }


  public void setReportingInterval(ReportingIntervalEnum reportingInterval) {
    this.reportingInterval = reportingInterval;
  }


  public PortalLink fromDate(LocalDate fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Request statements from date
   * @return fromDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request statements from date")

  public LocalDate getFromDate() {
    return fromDate;
  }


  public void setFromDate(LocalDate fromDate) {
    this.fromDate = fromDate;
  }


  public PortalLink toDate(LocalDate toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * Request statements to date
   * @return toDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request statements to date")

  public LocalDate getToDate() {
    return toDate;
  }


  public void setToDate(LocalDate toDate) {
    this.toDate = toDate;
  }


  public PortalLink statementTypes(List<PortalLinkStatementTypes> statementTypes) {
    
    this.statementTypes = statementTypes;
    return this;
  }

  public PortalLink addStatementTypesItem(PortalLinkStatementTypes statementTypesItem) {
    if (this.statementTypes == null) {
      this.statementTypes = new ArrayList<PortalLinkStatementTypes>();
    }
    this.statementTypes.add(statementTypesItem);
    return this;
  }

   /**
   * Get statementTypes
   * @return statementTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PortalLinkStatementTypes> getStatementTypes() {
    return statementTypes;
  }


  public void setStatementTypes(List<PortalLinkStatementTypes> statementTypes) {
    this.statementTypes = statementTypes;
  }


   /**
   * Get portalUrl
   * @return portalUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getPortalUrl() {
    return portalUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortalLink portalLink = (PortalLink) o;
    return Objects.equals(this.uuid, portalLink.uuid) &&
        Objects.equals(this.reportingInterval, portalLink.reportingInterval) &&
        Objects.equals(this.fromDate, portalLink.fromDate) &&
        Objects.equals(this.toDate, portalLink.toDate) &&
        Objects.equals(this.statementTypes, portalLink.statementTypes) &&
        Objects.equals(this.portalUrl, portalLink.portalUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, reportingInterval, fromDate, toDate, statementTypes, portalUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortalLink {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    reportingInterval: ").append(toIndentedString(reportingInterval)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    statementTypes: ").append(toIndentedString(statementTypes)).append("\n");
    sb.append("    portalUrl: ").append(toIndentedString(portalUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

