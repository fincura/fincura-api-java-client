/*
 * Fincura Integration API
 * This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****
 *
 * The version of the OpenAPI document: 1.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fincura.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.fincura.client.model.LoanBorrowerInfo;
import org.fincura.client.model.LoanComplianceInfo;
import org.fincura.client.model.LoanDocuments;
import org.fincura.client.model.LoanFinancials;
import org.fincura.client.model.LoanGuarantors;
import org.fincura.client.model.LoanPeriods;
import org.fincura.client.model.LoanPriorYearFinancials;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;

/**
 * Loan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-11-16T22:01:35.618Z[GMT]")
public class Loan {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_LOAN_ID = "loan_id";
  @SerializedName(SERIALIZED_NAME_LOAN_ID)
  private String loanId;

  /**
   * Gets or Sets contractType
   */
  @JsonAdapter(ContractTypeEnum.Adapter.class)
  public enum ContractTypeEnum {
    LEASE("LEASE"),
    
    LOAN("LOAN"),
    
    NOT_APPLICABLE("NOT_APPLICABLE");

    private String value;

    ContractTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContractTypeEnum fromValue(String value) {
      for (ContractTypeEnum b : ContractTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContractTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContractTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContractTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContractTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contract_type";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
  private ContractTypeEnum contractType;

  public static final String SERIALIZED_NAME_BORROWER_UUID = "borrower_uuid";
  @SerializedName(SERIALIZED_NAME_BORROWER_UUID)
  private UUID borrowerUuid;

  public static final String SERIALIZED_NAME_BORROWER_INFO = "borrower_info";
  @SerializedName(SERIALIZED_NAME_BORROWER_INFO)
  private LoanBorrowerInfo borrowerInfo;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private BigDecimal principal;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interest_rate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private BigDecimal interestRate;

  /**
   * Gets or Sets interestType
   */
  @JsonAdapter(InterestTypeEnum.Adapter.class)
  public enum InterestTypeEnum {
    FIXED("FIXED"),
    
    ADJUSTABLE("ADJUSTABLE");

    private String value;

    InterestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterestTypeEnum fromValue(String value) {
      for (InterestTypeEnum b : InterestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterestTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTEREST_TYPE = "interest_type";
  @SerializedName(SERIALIZED_NAME_INTEREST_TYPE)
  private InterestTypeEnum interestType;

  public static final String SERIALIZED_NAME_TERM_MONTHS = "term_months";
  @SerializedName(SERIALIZED_NAME_TERM_MONTHS)
  private Integer termMonths;

  /**
   * Gets or Sets paymentType
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    PRINCIPAL_AND_INTEREST("PRINCIPAL_AND_INTEREST"),
    
    PRINCIPAL_PLUS_INTEREST("PRINCIPAL_PLUS_INTEREST"),
    
    IO_PERIOD("IO_PERIOD"),
    
    BALLON("BALLON");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PROPOSED("PROPOSED"),
    
    APPROVED("APPROVED"),
    
    DECLINED("DECLINED"),
    
    ACTIVE("ACTIVE"),
    
    PAID_OFF("PAID_OFF"),
    
    DESISTED("DESISTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    CURRENT("CURRENT"),
    
    GRACE_PERIOD("GRACE_PERIOD"),
    
    DELINQUENT("DELINQUENT");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "payment_status";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT = "monthly_payment";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT)
  private BigDecimal monthlyPayment;

  public static final String SERIALIZED_NAME_PAYMENTS_REMAINING = "payments_remaining";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_REMAINING)
  private Integer paymentsRemaining;

  public static final String SERIALIZED_NAME_OUTSTANDING_PRINCIPAL = "outstanding_principal";
  @SerializedName(SERIALIZED_NAME_OUTSTANDING_PRINCIPAL)
  private BigDecimal outstandingPrincipal;

  public static final String SERIALIZED_NAME_INTEREST_ACCRUED = "interest_accrued";
  @SerializedName(SERIALIZED_NAME_INTEREST_ACCRUED)
  private BigDecimal interestAccrued;

  public static final String SERIALIZED_NAME_LOAN_TO_VALUE = "loan_to_value";
  @SerializedName(SERIALIZED_NAME_LOAN_TO_VALUE)
  private BigDecimal loanToValue;

  /**
   * Gets or Sets scorecard
   */
  @JsonAdapter(ScorecardEnum.Adapter.class)
  public enum ScorecardEnum {
    PASSED("PASSED"),
    
    FAILED("FAILED"),
    
    NOT_APPLICABLE("NOT_APPLICABLE");

    private String value;

    ScorecardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScorecardEnum fromValue(String value) {
      for (ScorecardEnum b : ScorecardEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScorecardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScorecardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScorecardEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScorecardEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCORECARD = "scorecard";
  @SerializedName(SERIALIZED_NAME_SCORECARD)
  private ScorecardEnum scorecard;

  /**
   * Gets or Sets collateralType
   */
  @JsonAdapter(CollateralTypeEnum.Adapter.class)
  public enum CollateralTypeEnum {
    NONE("NONE"),
    
    CASH("CASH"),
    
    AR("AR"),
    
    IP("IP"),
    
    REAL_ESTATE("REAL_ESTATE"),
    
    EQUIPMENT("EQUIPMENT");

    private String value;

    CollateralTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CollateralTypeEnum fromValue(String value) {
      for (CollateralTypeEnum b : CollateralTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CollateralTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CollateralTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CollateralTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CollateralTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COLLATERAL_TYPE = "collateral_type";
  @SerializedName(SERIALIZED_NAME_COLLATERAL_TYPE)
  private CollateralTypeEnum collateralType;

  public static final String SERIALIZED_NAME_COLLATERAL_VALUE = "collateral_value";
  @SerializedName(SERIALIZED_NAME_COLLATERAL_VALUE)
  private BigDecimal collateralValue;

  public static final String SERIALIZED_NAME_COLLATERAL_LIFE_MONTHS = "collateral_life_months";
  @SerializedName(SERIALIZED_NAME_COLLATERAL_LIFE_MONTHS)
  private Integer collateralLifeMonths;

  public static final String SERIALIZED_NAME_RESIDUAL_VALUE = "residual_value";
  @SerializedName(SERIALIZED_NAME_RESIDUAL_VALUE)
  private BigDecimal residualValue;

  public static final String SERIALIZED_NAME_BALLOON_PAYMENT = "balloon_payment";
  @SerializedName(SERIALIZED_NAME_BALLOON_PAYMENT)
  private BigDecimal balloonPayment;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_DATE = "last_payment_date";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_DATE)
  private LocalDate lastPaymentDate;

  public static final String SERIALIZED_NAME_COMPLIANCE_INFO = "compliance_info";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_INFO)
  private LoanComplianceInfo complianceInfo;

  public static final String SERIALIZED_NAME_TEMPLATE_UUID = "template_uuid";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_UUID)
  private UUID templateUuid;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private List<LoanPeriods> periods = null;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<LoanDocuments> documents = null;

  public static final String SERIALIZED_NAME_FINANCIALS = "financials";
  @SerializedName(SERIALIZED_NAME_FINANCIALS)
  private LoanFinancials financials;

  public static final String SERIALIZED_NAME_ANALYSIS_COMMENTARY = "analysis_commentary";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_COMMENTARY)
  private String analysisCommentary;

  public static final String SERIALIZED_NAME_GUARANTORS = "guarantors";
  @SerializedName(SERIALIZED_NAME_GUARANTORS)
  private List<LoanGuarantors> guarantors = null;

  public static final String SERIALIZED_NAME_PRIOR_YEAR_FINANCIALS = "prior_year_financials";
  @SerializedName(SERIALIZED_NAME_PRIOR_YEAR_FINANCIALS)
  private LoanPriorYearFinancials priorYearFinancials;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private Object customAttributes;


   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUuid() {
    return uuid;
  }




  public Loan title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title of the Loan. Must be unique for the Borrower
   * @return title
  **/
  @ApiModelProperty(required = true, value = "Title of the Loan. Must be unique for the Borrower")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public Loan description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }




  public Loan externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * External ID is used to uniquely identify a record from your system in our system. Must be unique across records.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "External ID is used to uniquely identify a record from your system in our system. Must be unique across records.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Loan loanId(String loanId) {
    
    this.loanId = loanId;
    return this;
  }

   /**
   * Get loanId
   * @return loanId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoanId() {
    return loanId;
  }


  public void setLoanId(String loanId) {
    this.loanId = loanId;
  }


  public Loan contractType(ContractTypeEnum contractType) {
    
    this.contractType = contractType;
    return this;
  }

   /**
   * Get contractType
   * @return contractType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContractTypeEnum getContractType() {
    return contractType;
  }


  public void setContractType(ContractTypeEnum contractType) {
    this.contractType = contractType;
  }


  public Loan borrowerUuid(UUID borrowerUuid) {
    
    this.borrowerUuid = borrowerUuid;
    return this;
  }

   /**
   * UUID of the borrower for this loan. (see [Borrowers](#tag/Borrowers))
   * @return borrowerUuid
  **/
  @ApiModelProperty(required = true, value = "UUID of the borrower for this loan. (see [Borrowers](#tag/Borrowers))")

  public UUID getBorrowerUuid() {
    return borrowerUuid;
  }


  public void setBorrowerUuid(UUID borrowerUuid) {
    this.borrowerUuid = borrowerUuid;
  }


  public Loan borrowerInfo(LoanBorrowerInfo borrowerInfo) {
    
    this.borrowerInfo = borrowerInfo;
    return this;
  }

   /**
   * Get borrowerInfo
   * @return borrowerInfo
  **/
  @ApiModelProperty(required = true, value = "")

  public LoanBorrowerInfo getBorrowerInfo() {
    return borrowerInfo;
  }


  public void setBorrowerInfo(LoanBorrowerInfo borrowerInfo) {
    this.borrowerInfo = borrowerInfo;
  }


  public Loan principal(BigDecimal principal) {
    
    this.principal = principal;
    return this;
  }

   /**
   * Original principal value
   * minimum: 0
   * maximum: 1000000000000000000
   * @return principal
  **/
  @ApiModelProperty(required = true, value = "Original principal value")

  public BigDecimal getPrincipal() {
    return principal;
  }


  public void setPrincipal(BigDecimal principal) {
    this.principal = principal;
  }


  public Loan interestRate(BigDecimal interestRate) {
    
    this.interestRate = interestRate;
    return this;
  }

   /**
   * Get interestRate
   * minimum: 0
   * maximum: 100
   * @return interestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getInterestRate() {
    return interestRate;
  }


  public void setInterestRate(BigDecimal interestRate) {
    this.interestRate = interestRate;
  }


  public Loan interestType(InterestTypeEnum interestType) {
    
    this.interestType = interestType;
    return this;
  }

   /**
   * Get interestType
   * @return interestType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InterestTypeEnum getInterestType() {
    return interestType;
  }


  public void setInterestType(InterestTypeEnum interestType) {
    this.interestType = interestType;
  }


  public Loan termMonths(Integer termMonths) {
    
    this.termMonths = termMonths;
    return this;
  }

   /**
   * Get termMonths
   * @return termMonths
  **/
  @ApiModelProperty(required = true, value = "")

  public Integer getTermMonths() {
    return termMonths;
  }


  public void setTermMonths(Integer termMonths) {
    this.termMonths = termMonths;
  }


  public Loan paymentType(PaymentTypeEnum paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }


  public Loan state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public Loan paymentStatus(PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Get paymentStatus
   * @return paymentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public Loan startDate(LocalDate startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


   /**
   * Loan end date. Calculated field
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Loan end date. Calculated field")

  public LocalDate getEndDate() {
    return endDate;
  }




   /**
   * calculated field
   * minimum: -1000000000000000000
   * maximum: 1000000000000000000
   * @return monthlyPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "calculated field")

  public BigDecimal getMonthlyPayment() {
    return monthlyPayment;
  }




   /**
   * Calculated field
   * @return paymentsRemaining
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Calculated field")

  public Integer getPaymentsRemaining() {
    return paymentsRemaining;
  }




   /**
   * calculated field
   * minimum: -1000000000000000000
   * maximum: 1000000000000000000
   * @return outstandingPrincipal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "calculated field")

  public BigDecimal getOutstandingPrincipal() {
    return outstandingPrincipal;
  }




   /**
   * calculated field
   * minimum: -1000000000000000000
   * maximum: 1000000000000000000
   * @return interestAccrued
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "calculated field")

  public BigDecimal getInterestAccrued() {
    return interestAccrued;
  }




   /**
   * calculated field
   * minimum: -10000
   * maximum: 10000
   * @return loanToValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "calculated field")

  public BigDecimal getLoanToValue() {
    return loanToValue;
  }




  public Loan scorecard(ScorecardEnum scorecard) {
    
    this.scorecard = scorecard;
    return this;
  }

   /**
   * Get scorecard
   * @return scorecard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScorecardEnum getScorecard() {
    return scorecard;
  }


  public void setScorecard(ScorecardEnum scorecard) {
    this.scorecard = scorecard;
  }


  public Loan collateralType(CollateralTypeEnum collateralType) {
    
    this.collateralType = collateralType;
    return this;
  }

   /**
   * Get collateralType
   * @return collateralType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CollateralTypeEnum getCollateralType() {
    return collateralType;
  }


  public void setCollateralType(CollateralTypeEnum collateralType) {
    this.collateralType = collateralType;
  }


  public Loan collateralValue(BigDecimal collateralValue) {
    
    this.collateralValue = collateralValue;
    return this;
  }

   /**
   * Get collateralValue
   * minimum: 0
   * maximum: 1000000000000000000
   * @return collateralValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCollateralValue() {
    return collateralValue;
  }


  public void setCollateralValue(BigDecimal collateralValue) {
    this.collateralValue = collateralValue;
  }


  public Loan collateralLifeMonths(Integer collateralLifeMonths) {
    
    this.collateralLifeMonths = collateralLifeMonths;
    return this;
  }

   /**
   * The life of the collateral in months
   * @return collateralLifeMonths
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The life of the collateral in months")

  public Integer getCollateralLifeMonths() {
    return collateralLifeMonths;
  }


  public void setCollateralLifeMonths(Integer collateralLifeMonths) {
    this.collateralLifeMonths = collateralLifeMonths;
  }


  public Loan residualValue(BigDecimal residualValue) {
    
    this.residualValue = residualValue;
    return this;
  }

   /**
   * Get residualValue
   * minimum: 0
   * maximum: 1000000000000000000
   * @return residualValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getResidualValue() {
    return residualValue;
  }


  public void setResidualValue(BigDecimal residualValue) {
    this.residualValue = residualValue;
  }


  public Loan balloonPayment(BigDecimal balloonPayment) {
    
    this.balloonPayment = balloonPayment;
    return this;
  }

   /**
   * Get balloonPayment
   * minimum: 0
   * maximum: 1000000000000000000
   * @return balloonPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getBalloonPayment() {
    return balloonPayment;
  }


  public void setBalloonPayment(BigDecimal balloonPayment) {
    this.balloonPayment = balloonPayment;
  }


  public Loan lastPaymentDate(LocalDate lastPaymentDate) {
    
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * Get lastPaymentDate
   * @return lastPaymentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getLastPaymentDate() {
    return lastPaymentDate;
  }


  public void setLastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }


  public Loan complianceInfo(LoanComplianceInfo complianceInfo) {
    
    this.complianceInfo = complianceInfo;
    return this;
  }

   /**
   * Get complianceInfo
   * @return complianceInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LoanComplianceInfo getComplianceInfo() {
    return complianceInfo;
  }


  public void setComplianceInfo(LoanComplianceInfo complianceInfo) {
    this.complianceInfo = complianceInfo;
  }


  public Loan templateUuid(UUID templateUuid) {
    
    this.templateUuid = templateUuid;
    return this;
  }

   /**
   * DSRC template to use for finanical information
   * @return templateUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DSRC template to use for finanical information")

  public UUID getTemplateUuid() {
    return templateUuid;
  }


  public void setTemplateUuid(UUID templateUuid) {
    this.templateUuid = templateUuid;
  }


  public Loan periods(List<LoanPeriods> periods) {
    
    this.periods = periods;
    return this;
  }

  public Loan addPeriodsItem(LoanPeriods periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<LoanPeriods>();
    }
    this.periods.add(periodsItem);
    return this;
  }

   /**
   * ReportingPeriod&#39;s to include in the loan financial information
   * @return periods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ReportingPeriod's to include in the loan financial information")

  public List<LoanPeriods> getPeriods() {
    return periods;
  }


  public void setPeriods(List<LoanPeriods> periods) {
    this.periods = periods;
  }


  public Loan documents(List<LoanDocuments> documents) {
    
    this.documents = documents;
    return this;
  }

  public Loan addDocumentsItem(LoanDocuments documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<LoanDocuments>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Additional DocumentFile&#39;s to be included with loan information
   * @return documents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional DocumentFile's to be included with loan information")

  public List<LoanDocuments> getDocuments() {
    return documents;
  }


  public void setDocuments(List<LoanDocuments> documents) {
    this.documents = documents;
  }


  public Loan financials(LoanFinancials financials) {
    
    this.financials = financials;
    return this;
  }

   /**
   * Get financials
   * @return financials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LoanFinancials getFinancials() {
    return financials;
  }


  public void setFinancials(LoanFinancials financials) {
    this.financials = financials;
  }


  public Loan analysisCommentary(String analysisCommentary) {
    
    this.analysisCommentary = analysisCommentary;
    return this;
  }

   /**
   * Get analysisCommentary
   * @return analysisCommentary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAnalysisCommentary() {
    return analysisCommentary;
  }


  public void setAnalysisCommentary(String analysisCommentary) {
    this.analysisCommentary = analysisCommentary;
  }


  public Loan guarantors(List<LoanGuarantors> guarantors) {
    
    this.guarantors = guarantors;
    return this;
  }

  public Loan addGuarantorsItem(LoanGuarantors guarantorsItem) {
    if (this.guarantors == null) {
      this.guarantors = new ArrayList<LoanGuarantors>();
    }
    this.guarantors.add(guarantorsItem);
    return this;
  }

   /**
   * Get guarantors
   * @return guarantors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LoanGuarantors> getGuarantors() {
    return guarantors;
  }


  public void setGuarantors(List<LoanGuarantors> guarantors) {
    this.guarantors = guarantors;
  }


  public Loan priorYearFinancials(LoanPriorYearFinancials priorYearFinancials) {
    
    this.priorYearFinancials = priorYearFinancials;
    return this;
  }

   /**
   * Get priorYearFinancials
   * @return priorYearFinancials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LoanPriorYearFinancials getPriorYearFinancials() {
    return priorYearFinancials;
  }


  public void setPriorYearFinancials(LoanPriorYearFinancials priorYearFinancials) {
    this.priorYearFinancials = priorYearFinancials;
  }


  public Loan customAttributes(Object customAttributes) {
    
    this.customAttributes = customAttributes;
    return this;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCustomAttributes() {
    return customAttributes;
  }


  public void setCustomAttributes(Object customAttributes) {
    this.customAttributes = customAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loan loan = (Loan) o;
    return Objects.equals(this.uuid, loan.uuid) &&
        Objects.equals(this.title, loan.title) &&
        Objects.equals(this.description, loan.description) &&
        Objects.equals(this.createdDate, loan.createdDate) &&
        Objects.equals(this.externalId, loan.externalId) &&
        Objects.equals(this.loanId, loan.loanId) &&
        Objects.equals(this.contractType, loan.contractType) &&
        Objects.equals(this.borrowerUuid, loan.borrowerUuid) &&
        Objects.equals(this.borrowerInfo, loan.borrowerInfo) &&
        Objects.equals(this.principal, loan.principal) &&
        Objects.equals(this.interestRate, loan.interestRate) &&
        Objects.equals(this.interestType, loan.interestType) &&
        Objects.equals(this.termMonths, loan.termMonths) &&
        Objects.equals(this.paymentType, loan.paymentType) &&
        Objects.equals(this.state, loan.state) &&
        Objects.equals(this.paymentStatus, loan.paymentStatus) &&
        Objects.equals(this.startDate, loan.startDate) &&
        Objects.equals(this.endDate, loan.endDate) &&
        Objects.equals(this.monthlyPayment, loan.monthlyPayment) &&
        Objects.equals(this.paymentsRemaining, loan.paymentsRemaining) &&
        Objects.equals(this.outstandingPrincipal, loan.outstandingPrincipal) &&
        Objects.equals(this.interestAccrued, loan.interestAccrued) &&
        Objects.equals(this.loanToValue, loan.loanToValue) &&
        Objects.equals(this.scorecard, loan.scorecard) &&
        Objects.equals(this.collateralType, loan.collateralType) &&
        Objects.equals(this.collateralValue, loan.collateralValue) &&
        Objects.equals(this.collateralLifeMonths, loan.collateralLifeMonths) &&
        Objects.equals(this.residualValue, loan.residualValue) &&
        Objects.equals(this.balloonPayment, loan.balloonPayment) &&
        Objects.equals(this.lastPaymentDate, loan.lastPaymentDate) &&
        Objects.equals(this.complianceInfo, loan.complianceInfo) &&
        Objects.equals(this.templateUuid, loan.templateUuid) &&
        Objects.equals(this.periods, loan.periods) &&
        Objects.equals(this.documents, loan.documents) &&
        Objects.equals(this.financials, loan.financials) &&
        Objects.equals(this.analysisCommentary, loan.analysisCommentary) &&
        Objects.equals(this.guarantors, loan.guarantors) &&
        Objects.equals(this.priorYearFinancials, loan.priorYearFinancials) &&
        Objects.equals(this.customAttributes, loan.customAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, title, description, createdDate, externalId, loanId, contractType, borrowerUuid, borrowerInfo, principal, interestRate, interestType, termMonths, paymentType, state, paymentStatus, startDate, endDate, monthlyPayment, paymentsRemaining, outstandingPrincipal, interestAccrued, loanToValue, scorecard, collateralType, collateralValue, collateralLifeMonths, residualValue, balloonPayment, lastPaymentDate, complianceInfo, templateUuid, periods, documents, financials, analysisCommentary, guarantors, priorYearFinancials, customAttributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loan {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    loanId: ").append(toIndentedString(loanId)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    borrowerUuid: ").append(toIndentedString(borrowerUuid)).append("\n");
    sb.append("    borrowerInfo: ").append(toIndentedString(borrowerInfo)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    interestType: ").append(toIndentedString(interestType)).append("\n");
    sb.append("    termMonths: ").append(toIndentedString(termMonths)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    monthlyPayment: ").append(toIndentedString(monthlyPayment)).append("\n");
    sb.append("    paymentsRemaining: ").append(toIndentedString(paymentsRemaining)).append("\n");
    sb.append("    outstandingPrincipal: ").append(toIndentedString(outstandingPrincipal)).append("\n");
    sb.append("    interestAccrued: ").append(toIndentedString(interestAccrued)).append("\n");
    sb.append("    loanToValue: ").append(toIndentedString(loanToValue)).append("\n");
    sb.append("    scorecard: ").append(toIndentedString(scorecard)).append("\n");
    sb.append("    collateralType: ").append(toIndentedString(collateralType)).append("\n");
    sb.append("    collateralValue: ").append(toIndentedString(collateralValue)).append("\n");
    sb.append("    collateralLifeMonths: ").append(toIndentedString(collateralLifeMonths)).append("\n");
    sb.append("    residualValue: ").append(toIndentedString(residualValue)).append("\n");
    sb.append("    balloonPayment: ").append(toIndentedString(balloonPayment)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    complianceInfo: ").append(toIndentedString(complianceInfo)).append("\n");
    sb.append("    templateUuid: ").append(toIndentedString(templateUuid)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    financials: ").append(toIndentedString(financials)).append("\n");
    sb.append("    analysisCommentary: ").append(toIndentedString(analysisCommentary)).append("\n");
    sb.append("    guarantors: ").append(toIndentedString(guarantors)).append("\n");
    sb.append("    priorYearFinancials: ").append(toIndentedString(priorYearFinancials)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

