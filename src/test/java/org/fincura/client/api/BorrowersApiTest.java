/*
 * Fincura API
 * This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | Excel File | .xlsm | `application/vnd.ms-excel.sheet.macroEnabled.12`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****
 *
 * The version of the OpenAPI document: 1.2.6
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fincura.client.api;

import org.fincura.client.ApiException;
import org.fincura.client.model.Borrower;
import org.fincura.client.model.InlineResponse2001;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BorrowersApi
 */
@Ignore
public class BorrowersApiTest {

    private final BorrowersApi api = new BorrowersApi();

    
    /**
     * Create a new Borrower
     *
     * Create a new Borrower record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBorrowerTest() throws ApiException {
        Borrower borrower = null;
        Borrower response = api.createBorrower(borrower);

        // TODO: test validations
    }
    
    /**
     * List Borrowers
     *
     * List Borrower records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBorrowersTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String search = null;
        InlineResponse2001 response = api.listBorrowers(limit, offset, search);

        // TODO: test validations
    }
    
    /**
     * Update a Borrower
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partialUpdateBorrowerTest() throws ApiException {
        String uuid = null;
        String search = null;
        Borrower borrower = null;
        Borrower response = api.partialUpdateBorrower(uuid, search, borrower);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Borrower
     *
     * Retrieve a Borrower
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveBorrowerTest() throws ApiException {
        String uuid = null;
        String search = null;
        Borrower response = api.retrieveBorrower(uuid, search);

        // TODO: test validations
    }
    
}
